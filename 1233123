import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import paramiko
import threading

class RemoteServer:
    def __init__(self):
        self.ssh = None
        self.sftp = None

    def connect(self, server_ip, username, password):
        try:
            self.ssh = paramiko.SSHClient()
            self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            self.ssh.connect(server_ip, username=username, password=password)
            self.sftp = self.ssh.open_sftp()
            return True
        except Exception as e:
            messagebox.showerror("Error", f"Connection failed: {e}")
            return False

    def disconnect(self):
        if self.sftp:
            self.sftp.close()
        if self.ssh:
            self.ssh.close()

    def execute_command(self, command, log_text_widget, log_file_path):
        try:
            stdin, stdout, stderr = self.ssh.exec_command(command)
            for line in iter(stdout.readline, ""):
                log_text_widget.insert(tk.END, line)
                log_text_widget.see(tk.END)
                with open(log_file_path, 'a') as log_file:
                    log_file.write(line)
            for line in iter(stderr.readline, ""):
                log_text_widget.insert(tk.END, line)
                log_text_widget.see(tk.END)
                with open(log_file_path, 'a') as log_file:
                    log_file.write(line)
        except Exception as e:
            messagebox.showerror("Error", f"Command execution failed: {e}")

# 功能：连接远程服务器并交互
def login_server():
    server_ip = entry_job_server_ip.get()
    server_username = entry_job_server_username.get()
    server_password = entry_job_server_password.get()

    if not server_ip or not server_username or not server_password:
        messagebox.showerror("Error", "Please fill in all fields")
        return
    
    if remote_server.connect(server_ip, server_username, server_password):
        log_text.insert(tk.END, "Login successful\n")

def send_command(event):
    command = entry_job_command.get()
    if command.strip() == "":
        return
    entry_job_command.delete(0, tk.END)
    log_file_path = "server_log.txt"  # 保存日志的文件
    threading.Thread(target=remote_server.execute_command, args=(command, log_text, log_file_path)).start()

# 创建主窗口
root = tk.Tk()
root.title("Remote Server Interaction")

# 创建Frame
frame3 = ttk.Frame(root)
frame3.pack(pady=10, expand=True, fill='both')

label_job_server_ip = tk.Label(frame3, text="Job Server IP:")
label_job_server_ip.pack()
entry_job_server_ip = tk.Entry(frame3, width=40)
entry_job_server_ip.pack(pady=5)

label_job_server_username = tk.Label(frame3, text="Username:")
label_job_server_username.pack()
entry_job_server_username = tk.Entry(frame3, width=40)
entry_job_server_username.pack(pady=5)

label_job_server_password = tk.Label(frame3, text="Password:")
label_job_server_password.pack()
entry_job_server_password = tk.Entry(frame3, width=40, show='*')
entry_job_server_password.pack(pady=5)

button_login = tk.Button(frame3, text="Login", command=login_server)
button_login.pack(pady=5)

label_job_command = tk.Label(frame3, text="Command:")
label_job_command.pack()
entry_job_command = tk.Entry(frame3, width=40)
entry_job_command.pack(pady=5)
entry_job_command.bind("<Return>", send_command)

log_text = scrolledtext.ScrolledText(frame3, width=60, height=20)
log_text.pack(pady=5)

# 创建远程服务器对象
remote_server = RemoteServer()

# 运行主窗口
root.mainloop()
