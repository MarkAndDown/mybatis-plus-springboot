import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import paramiko
import threading
import time

class RemoteServer:
    def __init__(self):
        self.ssh = None
        self.channel = None
        self.running = False

    def connect(self, server_ip, username, password):
        try:
            self.ssh = paramiko.SSHClient()
            self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            self.ssh.connect(server_ip, username=username, password=password)
            self.channel = self.ssh.invoke_shell()
            self.running = True
            return True
        except Exception as e:
            return str(e)

    def disconnect(self):
        if self.channel:
            self.channel.close()
        if self.ssh:
            self.ssh.close()
        self.running = False

    def interact(self, command, log_text_widget):
        if not self.running:
            return
        
        self.channel.send(command + '\n')
        time.sleep(2)  # 等待命令执行
        output = self.channel.recv(4096).decode('utf-8')
        log_text_widget.insert(tk.END, output)
        log_text_widget.see(tk.END)

class RemoteInteractionApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Remote Server Interaction")
        self.remote_server = RemoteServer()

        # 创建GUI组件
        self.create_widgets()

    def create_widgets(self):
        frame = ttk.Frame(self.root)
        frame.pack(pady=10, expand=True, fill='both')

        # 服务器连接信息
        ttk.Label(frame, text="Server IP:").pack()
        self.entry_ip = tk.Entry(frame, width=40)
        self.entry_ip.pack(pady=5)

        ttk.Label(frame, text="Username:").pack()
        self.entry_username = tk.Entry(frame, width=40)
        self.entry_username.pack(pady=5)

        ttk.Label(frame, text="Password:").pack()
        self.entry_password = tk.Entry(frame, width=40, show='*')
        self.entry_password.pack(pady=5)

        self.button_login = ttk.Button(frame, text="Login", command=self.login_server)
        self.button_login.pack(pady=5)

        self.log_text = scrolledtext.ScrolledText(frame, width=80, height=20)
        self.log_text.pack(pady=5)

        ttk.Label(frame, text="Command:").pack()
        self.entry_command = tk.Entry(frame, width=80)
        self.entry_command.pack(pady=5)
        self.entry_command.bind("<Return>", self.send_command)

        self.button_disconnect = ttk.Button(frame, text="Disconnect", command=self.disconnect_server)
        self.button_disconnect.pack(pady=5)

    def login_server(self):
        server_ip = self.entry_ip.get()
        username = self.entry_username.get()
        password = self.entry_password.get()

        if not server_ip or not username or not password:
            messagebox.showerror("Error", "Please fill in all fields")
            return

        result = self.remote_server.connect(server_ip, username, password)
        if result is True:
            self.log_text.insert(tk.END, "Login successful\n")
        else:
            messagebox.showerror("Error", f"Connection failed: {result}")

    def send_command(self, event):
        command = self.entry_command.get()
        if command.strip() == "":
            return
        self.entry_command.delete(0, tk.END)
        threading.Thread(target=self.remote_server.interact, args=(command, self.log_text)).start()

    def disconnect_server(self):
        self.remote_server.disconnect()
        self.log_text.insert(tk.END, "Disconnected from server\n")

if __name__ == "__main__":
    root = tk.Tk()
    app = RemoteInteractionApp(root)
    root.mainloop()
