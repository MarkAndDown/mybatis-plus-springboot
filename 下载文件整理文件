import os
import paramiko
import shutil
import re
from datetime import datetime
import tkinter as tk
from tkinter import filedialog, messagebox

def load_parameters_from_file():
    try:
        with open("parameter.txt", "r") as file:
            lines = file.readlines()
            params = {}
            for line in lines:
                key, value = line.strip().split('=')
                params[key.strip()] = value.strip()

            hostname_var.set(params.get('hostname', ''))
            port_var.set(params.get('port', '22'))
            username_var.set(params.get('username', ''))
            password_var.set(params.get('password', ''))
            remote_folder_var.set(params.get('remote_folder', ''))
            local_folder_var.set(params.get('local_folder', ''))
            instance_folder_var.set(params.get('instance_folder', ''))
            new_location_var.set(params.get('new_location', ''))
            date_threshold_var.set(params.get('date_threshold', ''))
    except Exception as e:
        messagebox.showerror("错误", f"读取参数文件时出错：{e}")

def save_parameters_to_file():
    try:
        with open("parameter.txt", "w") as file:
            file.write(f"hostname={hostname_var.get()}\n")
            file.write(f"port={port_var.get()}\n")
            file.write(f"username={username_var.get()}\n")
            file.write(f"password={password_var.get()}\n")
            file.write(f"remote_folder={remote_folder_var.get()}\n")
            file.write(f"local_folder={local_folder_var.get()}\n")
            file.write(f"instance_folder={instance_folder_var.get()}\n")
            file.write(f"new_location={new_location_var.get()}\n")
            file.write(f"date_threshold={date_threshold_var.get()}\n")
        messagebox.showinfo("完成", "参数保存成功！")
    except Exception as e:
        messagebox.showerror("错误", f"保存参数时出错：{e}")

def download_files():
    try:
        # SSH连接信息
        hostname = hostname_var.get()
        port = int(port_var.get())
        username = username_var.get()
        password = password_var.get()

        # 远程文件夹路径
        remote_folder = remote_folder_var.get()

        # 本地保存路径
        local_folder = local_folder_var.get()

        # 指定日期
        date_threshold = datetime.strptime(date_threshold_var.get(), "%Y-%m-%d")

        # 建立SSH连接
        ssh_client = paramiko.SSHClient()
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh_client.connect(hostname, port, username, password)

        # 建立SFTP连接
        sftp_client = ssh_client.open_sftp()

        # 下载文件
        for file_attr in sftp_client.listdir_attr(remote_folder):
            file_name = file_attr.filename
            remote_filepath = os.path.join(remote_folder, file_name)
            try:
                # 获取文件的修改时间
                mtime = file_attr.st_mtime
                file_modification_time = datetime.fromtimestamp(mtime)
                
                # 如果文件修改时间在指定日期之后，则下载文件
                if file_modification_time >= date_threshold:
                    local_filepath = os.path.join(local_folder, file_name)
                    sftp_client.get(remote_filepath, local_filepath)
                    print(f'Downloaded: {file_name}')
            except Exception as e:
                print(f'Error downloading {file_name}: {e}')

        # 关闭连接
        sftp_client.close()
        ssh_client.close()

        messagebox.showinfo("完成", "文件下载完成！")
    except Exception as e:
        messagebox.showerror("错误", f"下载文件时出错：{e}")

def organize_files():
    try:
        # 本地保存路径
        local_folder = local_folder_var.get()

        # 指定的目标文件夹路径
        instance_folder = instance_folder_var.get()

        # 新位置
        new_location = new_location_var.get()

        # 整理文件
        for root, dirs, files in os.walk(instance_folder):
            for file in files:
                relative_path = os.path.relpath(os.path.join(root, file), instance_folder)
                source_path = os.path.join(local_folder, file)
                target_path = os.path.join(new_location, relative_path)
                
                # 检查本地文件是否存在
                if os.path.exists(source_path):
                    # 如果文件名是 ".数字" 这样的格式，则删除文件
                    if re.match(r'\.\d+$', file):
                        os.remove(source_path)
                        print(f'Removed {file} from {local_folder}')
                    else:
                        # 创建目标文件夹
                        target_folder_path = os.path.dirname(target_path)
                        os.makedirs(target_folder_path, exist_ok=True)
                        # 移动文件到目标位置
                        shutil.move(source_path, target_path)
                        print(f'Moved {file} to {target_path}')
                else:
                    print(f'File {file} does not exist in the local folder.')

        print('文件整理完成。')

        # 删除local_folder中的文件名是一个 ".数字" 这样的文件
        for file in os.listdir(local_folder):
            if re.match(r'\.\d+$', file):
                os.remove(os.path.join(local_folder, file))
                print(f'Removed {file} from {local_folder}')

        print('删除完成。')

        messagebox.showinfo("完成", "文件整理完成！")
    except Exception as e:
        messagebox.showerror("错误", f"整理文件时出错：{e}")

# 创建Tkinter窗口
root = tk.Tk()
root.title("文件整理器")

# 创建并布局各个控件
tk.Label(root, text="SSH Hostname:").grid(row=0, column=0, sticky="w")
hostname_var = tk.StringVar()
tk.Entry(root, textvariable=hostname_var).grid(row=0, column=1)

tk.Label(root, text="SSH Port:").grid(row=1, column=0, sticky="w")
port_var = tk.StringVar()
port_var.set("22")
tk.Entry(root, textvariable=port_var).grid(row=1, column=1)

tk.Label(root, text="SSH Username:").grid(row=2, column=0, sticky="w")
username_var = tk.StringVar()
tk.Entry(root, textvariable=username_var).grid(row=2, column=1)

tk.Label(root, text="SSH Password:").grid(row=3, column=0, sticky="w")
password_var = tk.StringVar()
tk.Entry(root, textvariable=password_var, show="*").grid(row=3, column=1)

tk.Label(root, text="Remote Folder Path:").grid(row=4, column=0, sticky="w")
remote_folder_var = tk.StringVar()
tk.Entry(root, textvariable=remote_folder_var).grid(row=4, column=1)

tk.Label(root, text="Local Folder Path:").grid(row=5, column=0, sticky="w")
local_folder_var = tk.StringVar()
tk.Entry(root, textvariable=local_folder_var).grid(row=5, column=1)

tk.Label(root, text="Instance Folder Path:").grid(row=6, column=0, sticky="w")
instance_folder_var = tk.StringVar()
tk.Entry(root, textvariable=instance_folder_var).grid(row=6, column=1)

tk.Label(root, text="New Location:").grid(row=7, column=0, sticky="w")
new_location_var = tk.StringVar()
tk.Entry(root, textvariable=new_location_var).grid(row=7, column=1)

tk.Label(root, text="Date Threshold (YYYY-MM-DD):").grid(row=8, column=0, sticky="w")
date_threshold_var = tk.StringVar()
tk.Entry(root, textvariable=date_threshold_var).grid(row=8, column=1)

# 添加按钮，点击时执行加载默认值的操作
tk.Button(root, text="加载参数", command=load_parameters_from_file).grid(row=9, column=0)
tk.Button(root, text="保存参数", command=save_parameters_to_file).grid(row=9, column=1)

# 运行窗口主循环
root.mainloop()








import tkinter as tk
from tkinter import ttk
from tkinter.scrolledtext import ScrolledText
import paramiko

class LogViewer:
    def __init__(self, master):
        self.master = master
        master.title("Log Viewer")

        # SSH 连接参数输入框
        self.host_var = tk.StringVar(value="your_host")
        self.port_var = tk.StringVar(value="22")
        self.username_var = tk.StringVar(value="your_username")
        self.password_var = tk.StringVar(value="your_password")
        self.log_file_path_var = tk.StringVar(value="path_to_your_log_file")

        ttk.Label(master, text="Host:").grid(row=0, column=0)
        ttk.Entry(master, textvariable=self.host_var).grid(row=0, column=1)
        ttk.Label(master, text="Port:").grid(row=1, column=0)
        ttk.Entry(master, textvariable=self.port_var).grid(row=1, column=1)
        ttk.Label(master, text="Username:").grid(row=2, column=0)
        ttk.Entry(master, textvariable=self.username_var).grid(row=2, column=1)
        ttk.Label(master, text="Password:").grid(row=3, column=0)
        ttk.Entry(master, textvariable=self.password_var, show="*").grid(row=3, column=1)
        ttk.Label(master, text="Log File Path:").grid(row=4, column=0)
        ttk.Entry(master, textvariable=self.log_file_path_var).grid(row=4, column=1)

        ttk.Button(master, text="Connect", command=self.connect_to_server).grid(row=5, column=0, columnspan=2)

        self.log_text = ScrolledText(master, state='disabled', wrap='word', height=10)
        self.log_text.grid(row=6, column=0, columnspan=2, sticky='nsew')

        self.filter_var = tk.StringVar(value="INFO")
        ttk.Label(master, text="Log Level Filter:").grid(row=7, column=0)
        ttk.Combobox(master, textvariable=self.filter_var, values=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL", "ALL"]).grid(row=7, column=1)

        # 初始化 SSH 客户端
        self.ssh = None
        self.channel = None

    def connect_to_server(self):
        try:
            # 创建 SSH 客户端
            self.ssh = paramiko.SSHClient()
            self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            self.ssh.connect(hostname=self.host_var.get(), port=int(self.port_var.get()), 
                             username=self.username_var.get(), password=self.password_var.get())

            # 打开远程日志文件
            self.channel = self.ssh.invoke_shell()
            self.channel.send(f"tail -f {self.log_file_path_var.get()}\n")

            self.update_logs()
        except Exception as e:
            self.log_text.configure(state='normal')
            self.log_text.delete(1.0, tk.END)
            self.log_text.insert(tk.END, f"Error: {str(e)}\n")
            self.log_text.configure(state='disabled')

    def update_logs(self):
        if self.channel is None:
            return

        try:
            if self.channel.recv_ready():
                logs = self.channel.recv(1024).decode('utf-8')

                # 进行日志筛选
                filtered_logs = self.filter_logs(logs)

                # 显示日志
                self.display_logs(filtered_logs)
        except Exception as e:
            self.log_text.configure(state='normal')
            self.log_text.insert(tk.END, f"Error: {str(e)}\n")
            self.log_text.configure(state='disabled')

        # 每隔一段时间更新日志
        self.master.after(5000, self.update_logs)

    def filter_logs(self, logs):
        # 进行日志筛选，仅保留指定日志级别的日志
        selected_level = self.filter_var.get()
        if selected_level == "ALL":
            return logs
        filtered_logs = []
        for line in logs.split('\n'):
            if selected_level in line:
                filtered_logs.append(line)
        return '\n'.join(filtered_logs)

    def display_logs(self, logs):
        self.log_text.configure(state='normal')
        self.log_text.insert(tk.END, logs)
        self.log_text.configure(state='disabled')
        self.log_text.see(tk.END)  # 自动滚动到最新日志

def main():
    root = tk.Tk()
    log_viewer = LogViewer(root)
    root.mainloop()

if __name__ == "__main__":
    main()
